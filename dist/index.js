"use strict";var y=function(e,a){return function(){return a||e((a={exports:{}}).exports,a),a.exports}};var b=y(function(cr,_){"use strict";var B=require("@stdlib/ndarray-base-to-unique-normalized-indices"),U=require("@stdlib/array-base-indices-complement"),Y=require("@stdlib/array-base-take-indexed");function z(e,a){var r=B(a,e.length-1);return r===null?[]:Y(e,U(e.length,r))}_.exports=z});var T=y(function(br,E){"use strict";var q=require("@stdlib/ndarray-dtypes"),G=require("@stdlib/blas-ext-base-ndarray-gindex-of"),H=require("@stdlib/blas-ext-base-ndarray-dindex-of"),J=require("@stdlib/blas-ext-base-ndarray-sindex-of"),K=require("@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-factory"),M=q("all"),N=q("all"),Q=q("integer_index_and_generic"),W=q("integer_index_and_generic"),X={output:"integer_index_and_generic",casting:"none"},Z={types:["float64","float32"],fcns:[H,J],default:G},$=K(Z,[M,N,Q],W,X);E.exports=$});var D=y(function(Tr,k){"use strict";var O=require("@stdlib/assert-has-own-property"),x=require("@stdlib/assert-is-plain-object"),V=require("@stdlib/assert-is-integer").isPrimitive,h=require("@stdlib/assert-is-ndarray-like"),S=require("@stdlib/ndarray-base-broadcast-scalar"),P=require("@stdlib/ndarray-base-maybe-broadcast-array"),I=require("@stdlib/ndarray-dtype"),rr=require("@stdlib/ndarray-shape"),er=require("@stdlib/ndarray-order"),w=require("@stdlib/string-format"),ar=require("@stdlib/ndarray-defaults"),ir=b(),tr=T(),nr=ar.get("dtypes.integer_index");function sr(e,a,r){var d,i,v,s,t,n,g,o,l,u;if(v=arguments.length,!h(e))throw new TypeError(w("invalid argument. First argument must be an ndarray. Value: `%s`.",e));if(v<2)throw new TypeError(w("invalid argument. Second argument must be either an ndarray or a scalar value. Value: `%s`.",a));if(o=I(e),g=er(e),s={dims:[-1],keepdims:!1},t=0,n=!0,d=!1,v===3)V(r)?t=r:h(r)?(t=r,n=!1):(i=r,d=!0);else if(v>3){if(V(r))t=r;else if(h(r))t=r,n=!1;else throw new TypeError(w("invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.",r));i=arguments[3],d=!0}if(d){if(!x(i))throw new TypeError(w("invalid argument. Options argument must be an object. Value: `%s`.",i));O(i,"dim")&&(s.dims[0]=i.dim),O(i,"keepdims")&&(s.keepdims=i.keepdims),O(i,"dtype")&&(s.dtype=i.dtype)}if(l=rr(e),l.length<1)throw new RangeError("invalid argument. First argument must have at least one dimension.");return l=ir(l,s.dims),h(a)?u=P(a,l):u=S(a,o,l,g),n?t=S(t,nr,l,g):t=P(t,l),tr(e,u,t,s)}k.exports=sr});var L=y(function(Or,C){"use strict";var ur=require("@stdlib/assert-has-own-property"),vr=require("@stdlib/assert-is-plain-object"),F=require("@stdlib/assert-is-integer").isPrimitive,m=require("@stdlib/assert-is-ndarray-like"),j=require("@stdlib/ndarray-base-broadcast-scalar"),A=require("@stdlib/ndarray-base-maybe-broadcast-array"),lr=require("@stdlib/ndarray-dtype"),dr=require("@stdlib/ndarray-shape"),gr=require("@stdlib/ndarray-order"),p=require("@stdlib/string-format"),or=require("@stdlib/ndarray-defaults"),pr=b(),fr=T().assign,mr=or.get("dtypes.integer_index");function yr(e,a,r,d){var i,v,s,t,n,g,o,l,u,c,f;if(s=arguments.length,!m(e))throw new TypeError(p("invalid argument. The first argument must be an ndarray. Value: `%s`.",e));if(s<2)throw new TypeError(p("invalid argument. Second argument must be either an ndarray or a scalar value. Value: `%s`.",a));if(s<3)throw new TypeError(p("invalid argument. Third argument must be an ndarray. Value: `%s`.",r));if(l=lr(e),o=gr(e),t={dims:[-1]},n=0,g=!0,i=!1,s===3)f=r;else if(s===4)if(m(d))if(f=d,F(r))n=r;else if(m(r))n=r,g=!1;else throw new TypeError(p("invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.",r));else f=r,v=d,i=!0;else{if(F(r))n=r;else if(m(r))n=r,g=!1;else throw new TypeError(p("invalid argument. Third argument must be either an ndarray or an integer. Value: `%s`.",r));f=d,v=arguments[4],i=!0}if(i){if(!vr(v))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",v));ur(v,"dim")&&(t.dims[0]=v.dim)}if(u=dr(e),u.length<1)throw new RangeError("invalid argument. First argument must have at least one dimension.");return u=pr(u,t.dims),m(a)?c=A(a,u):c=j(a,l,u,o),g?n=j(n,mr,u,o):n=A(n,u),fr(e,c,n,f,t)}C.exports=yr});var qr=require("@stdlib/utils-define-nonenumerable-read-only-property"),R=D(),hr=L();qr(R,"assign",hr);module.exports=R;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
